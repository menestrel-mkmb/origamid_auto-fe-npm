import Emitter from"tiny-emitter";import listen from"good-listener";import ClipboardActionDefault from"./actions/default";import ClipboardActionCut from"./actions/cut";import ClipboardActionCopy from"./actions/copy";function getAttributeValue(t,e){t="data-clipboard-"+t;if(e.hasAttribute(t))return e.getAttribute(t)}class Clipboard extends Emitter{constructor(t,e){super(),this.resolveOptions(e),this.listenClick(t)}resolveOptions(t={}){this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText,this.container="object"==typeof t.container?t.container:document.body}listenClick(t){this.listener=listen(t,"click",t=>this.onClick(t))}onClick(t){const e=t.delegateTarget||t.currentTarget;var t=this.action(e)||"copy",i=ClipboardActionDefault({action:t,container:this.container,target:this.target(e),text:this.text(e)});this.emit(i?"success":"error",{action:t,text:i,trigger:e,clearSelection(){e&&e.focus(),window.getSelection().removeAllRanges()}})}defaultAction(t){return getAttributeValue("action",t)}defaultTarget(t){t=getAttributeValue("target",t);if(t)return document.querySelector(t)}static copy(t,e={container:document.body}){return ClipboardActionCopy(t,e)}static cut(t){return ClipboardActionCut(t)}static isSupported(t=["copy","cut"]){t="string"==typeof t?[t]:t;let e=!!document.queryCommandSupported;return t.forEach(t=>{e=e&&!!document.queryCommandSupported(t)}),e}defaultText(t){return getAttributeValue("text",t)}destroy(){this.listener.destroy()}}export default Clipboard;